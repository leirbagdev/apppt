// Utilit√°rios para testes do dashboard

export const mockData = {
  activityData: [
    { name: "Seg", value: 3 },
    { name: "Ter", value: 4 },
    { name: "Qua", value: 2 },
    { name: "Qui", value: 5 },
    { name: "Sex", value: 3 },
    { name: "S√°b", value: 1 },
    { name: "Dom", value: 0 },
  ],

  weightData: [
    { name: "Jan", value: 86 },
    { name: "Fev", value: 85 },
    { name: "Mar", value: 84 },
    { name: "Abr", value: 83 },
    { name: "Mai", value: 82 },
    { name: "Jun", value: 81 },
  ],

  nutritionData: [
    { name: "Prote√≠na", value: 120 },
    { name: "Carboidrato", value: 200 },
    { name: "Gordura", value: 80 },
    { name: "Fibra", value: 25 },
  ],

  sleepData: [
    { name: "Seg", value: 7.5 },
    { name: "Ter", value: 8.0 },
    { name: "Qua", value: 6.5 },
    { name: "Qui", value: 7.8 },
    { name: "Sex", value: 7.2 },
    { name: "S√°b", value: 8.5 },
    { name: "Dom", value: 8.2 },
  ],
}

export const validateChartData = (data: any[], dataKey: string) => {
  if (!Array.isArray(data)) {
    throw new Error("Data deve ser um array")
  }

  if (data.length === 0) {
    throw new Error("Data n√£o pode estar vazio")
  }

  data.forEach((item, index) => {
    if (!item.hasOwnProperty(dataKey)) {
      throw new Error(`Item ${index} n√£o possui a propriedade ${dataKey}`)
    }

    if (typeof item[dataKey] !== "number") {
      throw new Error(`Valor de ${dataKey} no item ${index} deve ser um n√∫mero`)
    }
  })

  return true
}

export const generateTestHeatmapData = (days = 30) => {
  const data = []
  const today = new Date()

  for (let i = 0; i < days; i++) {
    const date = new Date()
    date.setDate(today.getDate() - i)

    // Gerar dados determin√≠sticos para testes
    const hasActivity = i % 3 !== 0 // Atividade a cada 3 dias

    if (hasActivity) {
      data.push({
        date,
        value: 0.5 + (i % 5) * 0.1, // Valores entre 0.5 e 0.9
      })
    }
  }

  return data
}

// Fun√ß√£o para testar se o componente pode ser renderizado sem erros
export const testComponentRender = (componentName: string, props: any) => {
  try {
    // Simular renderiza√ß√£o b√°sica
    if (!props) {
      throw new Error(`Props s√£o obrigat√≥rias para ${componentName}`)
    }

    console.log(`‚úÖ ${componentName}: Props v√°lidas`)
    console.log(`‚úÖ ${componentName}: Renderiza√ß√£o simulada com sucesso`)

    return { success: true, component: componentName }
  } catch (error) {
    console.error(`‚ùå ${componentName}: Erro na renderiza√ß√£o`, error)
    return { success: false, error: error.message }
  }
}

// Executar testes b√°sicos
console.log("üß™ Executando testes b√°sicos...")

// Testar dados mock
try {
  validateChartData(mockData.activityData, "value")
  console.log("‚úÖ mockData.activityData: V√°lido")
} catch (error) {
  console.error("‚ùå mockData.activityData: Inv√°lido", error.message)
}

try {
  validateChartData(mockData.weightData, "value")
  console.log("‚úÖ mockData.weightData: V√°lido")
} catch (error) {
  console.error("‚ùå mockData.weightData: Inv√°lido", error.message)
}

// Testar gera√ß√£o de dados de heatmap
const testHeatmapData = generateTestHeatmapData(10)
console.log(`‚úÖ generateTestHeatmapData: Gerou ${testHeatmapData.length} itens`)

// Testar renderiza√ß√£o de componentes
testComponentRender("ActivityChart", {
  data: mockData.activityData,
  type: "bar",
  dataKey: "value",
})

console.log("üéâ Testes b√°sicos conclu√≠dos!")
